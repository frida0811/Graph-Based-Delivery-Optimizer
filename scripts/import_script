MATCH (n)
DETACH DELETE n;

LOAD CSV WITH HEADERS FROM 'file:///device_data.csv' AS row
WITH row WHERE row.is_source = 'TRUE'
MERGE (e:source { name: row.device, state: 'idle'})
RETURN count(e);

LOAD CSV WITH HEADERS FROM 'file:///device_data.csv' AS row
WITH row WHERE row.is_dest = 'TRUE'
MERGE (e:destination { name: row.device, state: 'idle'})
RETURN count(e);

LOAD CSV WITH HEADERS FROM 'file:///device_data.csv' AS row
WITH row WHERE row.is_dest = 'FALSE' and row.is_source = 'FALSE'
MERGE (e:transport { name: row.device, state: 'idle'})
RETURN count(e);

LOAD CSV WITH HEADERS FROM 'file:///device_data.csv' AS row
WITH row WHERE row.is_dest = 'FALSE' and row.is_source = 'FALSE'
MATCH (s)
MATCH (t)
MATCH (d)
WHERE s.name = row.from and t.name = row.device and d.name = row.to
MERGE (s)-[:convey {cost: 1, state: 'idle'}]->(t) -[:convey {cost: 1, state: 'idle'}] -> (d)
RETURN *;

MATCH (a)-[r]->(b)
WITH a, type(r) as type, collect(r) as rels, b
WHERE size(rels) > 1
UNWIND tail(rels) as rel
DELETE rel;

MATCH (b:transport)-[r]->(c)
with collect(r) as rel,b
where size(rel) > 1
set b:diverter
return size(rel),b.name;

MATCH (b:transport)<-[r]-(c)
with collect(r) as rel,b
where size(rel) > 1
set b:converter
return size(rel),b.name;
